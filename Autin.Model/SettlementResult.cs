// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Autin.Model;
//
//    var settlementResult = SettlementResult.FromJson(jsonString);

namespace Autin.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SettlementResult
    {
        [JsonProperty("Result")]
        public string Result { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("gcr_json")]
        public List<GcrJson> GcrJson { get; set; }

        [JsonProperty("gp_json")]
        public List<GpJson> GpJson { get; set; }

        [JsonProperty("nfgp_json")]
        public List<NfgpJson> NfgpJson { get; set; }
    }

    public partial class GcrJson
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("UnitId")]
        public UnitId UnitId { get; set; }

        [JsonProperty("t")]
        public string T { get; set; }

        [JsonProperty("Pi")]
        public double Pi { get; set; }
    }

    public partial class GpJson
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("UnitId")]
        public UnitId UnitId { get; set; }

        [JsonProperty("t")]
        public string T { get; set; }

        [JsonProperty("LMP")]
        public double Lmp { get; set; }

        [JsonProperty("EMP")]
        public long Emp { get; set; }

        [JsonProperty("CongestionPrice")]
        public double CongestionPrice { get; set; }
    }

    public partial class NfgpJson
    {
        public double Limt { get; set; }
        public double LoadRate { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("Nfg")]
        public long Nfg { get; set; }

        [JsonProperty("t")]
        public string T { get; set; }

        [JsonProperty("Power")]
        public double Power { get; set; }
    }

    public enum UnitId { The320100A01U01, The320100A02U01, The320100A03U01, The320100A04U01, The320100A05U01 };

    public partial class SettlementResult
    {
        public static SettlementResult FromJson(string json) => JsonConvert.DeserializeObject<SettlementResult>(json, Autin.Model.SettlementResultConverter.Settings);
    }

    public static class SettlementResultSerialize
    {
        public static string ToJson(this SettlementResult self) => JsonConvert.SerializeObject(self, Autin.Model.SettlementResultConverter.Settings);
    }

    internal static class SettlementResultConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                UnitIdConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class UnitIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(UnitId) || t == typeof(UnitId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "'320100A01U01'":
                    return UnitId.The320100A01U01;
                case "'320100A02U01'":
                    return UnitId.The320100A02U01;
                case "'320100A03U01'":
                    return UnitId.The320100A03U01;
                case "'320100A04U01'":
                    return UnitId.The320100A04U01;
                case "'320100A05U01'":
                    return UnitId.The320100A05U01;
            }
            throw new Exception("Cannot unmarshal type UnitId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (UnitId)untypedValue;
            switch (value)
            {
                case UnitId.The320100A01U01:
                    serializer.Serialize(writer, "'320100A01U01'");
                    return;
                case UnitId.The320100A02U01:
                    serializer.Serialize(writer, "'320100A02U01'");
                    return;
                case UnitId.The320100A03U01:
                    serializer.Serialize(writer, "'320100A03U01'");
                    return;
                case UnitId.The320100A04U01:
                    serializer.Serialize(writer, "'320100A04U01'");
                    return;
                case UnitId.The320100A05U01:
                    serializer.Serialize(writer, "'320100A05U01'");
                    return;
            }
            throw new Exception("Cannot marshal type UnitId");
        }

        public static readonly UnitIdConverter Singleton = new UnitIdConverter();
    }
}
