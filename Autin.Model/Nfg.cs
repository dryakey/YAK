// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Autin.Model;
//
//    var nfg = Nfg.FromJson(jsonString);

namespace Autin.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Nfg
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("nfg_id")]
        public long NfgId { get; set; }

        [JsonProperty("fault_type")]
        public string FaultType { get; set; }

        [JsonProperty("nfg_name")]
        public string NfgName { get; set; }

        [JsonProperty("nfg_description")]
        public string NfgDescription { get; set; }

        [JsonProperty("punish_coefficient")]
        public double PunishCoefficient { get; set; }

        [JsonProperty("client_id")]
        public long ClientId { get; set; }

        [JsonProperty("case_id")]
        public string CaseId { get; set; }

        [JsonProperty("settlement_date")]
        public DateTimeOffset SettlementDate { get; set; }
    }

    public partial class Nfg
    {
        public static List<Nfg> FromJson(string json) => JsonConvert.DeserializeObject<List<Nfg>>(json, Autin.Model.NfgConverter.Settings);
    }

    public static class NfgSerialize
    {
        public static string ToJson(this List<Nfg> self) => JsonConvert.SerializeObject(self, Autin.Model.NfgConverter.Settings);
    }

    internal static class NfgConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
