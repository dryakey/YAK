// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AutinPower.WPF.Models;
//
//    var unitParamsConfigModel = UnitParamsConfigModel.FromJson(jsonString);

namespace AutinPower.WPF.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Autin.Model;

    public partial class UnitParamsConfigModel : IAutinDataModel
    {
        public string Key { get; set; }
        public DateTimeOffset DataDate { get; set; }

        [JsonProperty("settlement_date")]
        public DateTimeOffset SettlementDate { get; set; }

        [JsonProperty("user_id")]
        public long UserId { get; set; }

        [JsonProperty("client_id")]
        public long ClientId { get; set; }

        [JsonProperty("client_token")]
        public string ClientToken { get; set; }

        [JsonProperty("case_id")]
        public string CaseId { get; set; }

        [JsonProperty("unit_id")]
        public string UnitId { get; set; }

        [JsonProperty("unit")]
        public string Unit { get; set; }
        
        [JsonProperty("unit_type_name")]
        public string UnitTypeName { get; set; }

        [JsonProperty("cold_start_cost")]
        public double ColdStartCost { get; set; }

        [JsonProperty("warm_start_cost")]
        public double WarmStartCost { get; set; }

        [JsonProperty("hot_start_cost")]
        public double HotStartCost { get; set; }

        [JsonProperty("noload_cost")]
        public double NoloadCost { get; set; }

        [JsonProperty("maximum_start_times")]
        public long MaximumStartTimes { get; set; }

        [JsonProperty("minimum_running_hours")]
        public long MinimumRunningHours { get; set; }

        [JsonProperty("load_rate")]
        public double LoadRate { get; set; }

        [JsonProperty("energy_cost")]
        public List<EnergyCost> EnergyCost { get; set; }

        [JsonProperty("connector")]
        public string Connector { get; set; }

        [JsonProperty("unit_type")]
        public string UnitType { get; set; }

        [JsonProperty("rated_capacity")]
        public double RatedCapacity { get; set; }

        [JsonProperty("maximum_tech_output")]
        public double MaximumTechOutput { get; set; }

        [JsonProperty("minimum_tech_output")]
        public double MinimumTechOutput { get; set; }

        [JsonProperty("time_to_ongrid_from_cold_star")]
        public long TimeToOngridFromColdStar { get; set; }

        [JsonProperty("time_to_ongrid_from_warm_star")]
        public long TimeToOngridFromWarmStar { get; set; }

        [JsonProperty("time_to_ongrid_from_hot_star")]
        public long TimeToOngridFromHotStar { get; set; }

        [JsonProperty("time_to_warm_from_hot")]
        public long TimeToWarmFromHot { get; set; }

        [JsonProperty("time_to_cold_from_hot")]
        public long TimeToColdFromHot { get; set; }

        [JsonProperty("state_change_cost")]
        public long StateChangeCost { get; set; }

        [JsonProperty("fix_cost")]
        public long FixCost { get; set; }

        [JsonProperty("fm_maximum_tech_output")]
        public long FmMaximumTechOutput { get; set; }

        [JsonProperty("fm_minimum_tech_output")]
        public long FmMinimumTechOutput { get; set; }

        [JsonProperty("plant_power_consuming_rate")]
        public double PlantPowerConsumingRate { get; set; }

        [JsonProperty("grid_loss_coefficient")]
        public double GridLossCoefficient { get; set; }
    }

    public partial class EnergyCost
    {
        [JsonProperty("period_id")]
        public string PeriodId { get; set; }

        [JsonProperty("gen_output")]
        public double GenOutput { get; set; }

        [JsonProperty("declare_price")]
        public double DeclarePrice { get; set; }
    }

    public partial class UnitParamsConfigModel
    {
        public static UnitParamsConfigModel FromJson(string json) => JsonConvert.DeserializeObject<UnitParamsConfigModel>(json, AutinPower.WPF.Models.UnitParamsConfigModelConverter.Settings);
    }

    public static class UnitParamsConfigModelSerialize
    {
        public static string ToJson(this UnitParamsConfigModel self) => JsonConvert.SerializeObject(self, AutinPower.WPF.Models.UnitParamsConfigModelConverter.Settings);
    }

    internal static class UnitParamsConfigModelConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
